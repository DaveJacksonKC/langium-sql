/******************************************************************************
 * This file was generated by langium-cli 0.5.0-next.f150dbd.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type DataType = BooleanDataType | IntegerDataType | StringDataType;

export const DataType = 'DataType';

export function isDataType(item: unknown): item is DataType {
    return reflection.isInstance(item, DataType);
}

export type Expression = ColumnReference;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type Identifier = string;

export type Statement = SelectQuery | TableDefinition;

export const Statement = 'Statement';

export function isStatement(item: unknown): item is Statement {
    return reflection.isInstance(item, Statement);
}

export interface BooleanDataType extends AstNode {
    readonly $container: ColumnDefinition;
}

export const BooleanDataType = 'BooleanDataType';

export function isBooleanDataType(item: unknown): item is BooleanDataType {
    return reflection.isInstance(item, BooleanDataType);
}

export interface ColumnDefinition extends AstNode {
    readonly $container: TableDefinition;
    name: Identifier
    type: DataType
}

export const ColumnDefinition = 'ColumnDefinition';

export function isColumnDefinition(item: unknown): item is ColumnDefinition {
    return reflection.isInstance(item, ColumnDefinition);
}

export interface ColumnReference extends AstNode {
    readonly $container: SelectQuery;
    column: Reference<ColumnDefinition>
}

export const ColumnReference = 'ColumnReference';

export function isColumnReference(item: unknown): item is ColumnReference {
    return reflection.isInstance(item, ColumnReference);
}

export interface IntegerDataType extends AstNode {
    readonly $container: ColumnDefinition;
}

export const IntegerDataType = 'IntegerDataType';

export function isIntegerDataType(item: unknown): item is IntegerDataType {
    return reflection.isInstance(item, IntegerDataType);
}

export interface SelectQuery extends AstNode {
    readonly $container: SqlFile;
    columns: Array<Expression>
    table: Reference<TableDefinition>
    trailingComma: boolean
    wildcard?: '*'
}

export const SelectQuery = 'SelectQuery';

export function isSelectQuery(item: unknown): item is SelectQuery {
    return reflection.isInstance(item, SelectQuery);
}

export interface SqlFile extends AstNode {
    statements: Array<Statement>
}

export const SqlFile = 'SqlFile';

export function isSqlFile(item: unknown): item is SqlFile {
    return reflection.isInstance(item, SqlFile);
}

export interface StringDataType extends AstNode {
    readonly $container: ColumnDefinition;
    length?: number
    varying: boolean
}

export const StringDataType = 'StringDataType';

export function isStringDataType(item: unknown): item is StringDataType {
    return reflection.isInstance(item, StringDataType);
}

export interface TableDefinition extends AstNode {
    readonly $container: SqlFile;
    columns: Array<ColumnDefinition>
    name: Identifier
}

export const TableDefinition = 'TableDefinition';

export function isTableDefinition(item: unknown): item is TableDefinition {
    return reflection.isInstance(item, TableDefinition);
}

export type SqlAstType = 'BooleanDataType' | 'ColumnDefinition' | 'ColumnReference' | 'DataType' | 'Expression' | 'IntegerDataType' | 'SelectQuery' | 'SqlFile' | 'Statement' | 'StringDataType' | 'TableDefinition';

export class SqlAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['BooleanDataType', 'ColumnDefinition', 'ColumnReference', 'DataType', 'Expression', 'IntegerDataType', 'SelectQuery', 'SqlFile', 'Statement', 'StringDataType', 'TableDefinition'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case BooleanDataType:
            case IntegerDataType:
            case StringDataType: {
                return this.isSubtype(DataType, supertype);
            }
            case ColumnReference: {
                return this.isSubtype(Expression, supertype);
            }
            case SelectQuery:
            case TableDefinition: {
                return this.isSubtype(Statement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'ColumnReference:column': {
                return ColumnDefinition;
            }
            case 'SelectQuery:table': {
                return TableDefinition;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'SelectQuery': {
                return {
                    name: 'SelectQuery',
                    mandatory: [
                        { name: 'columns', type: 'array' },
                        { name: 'trailingComma', type: 'boolean' }
                    ]
                };
            }
            case 'SqlFile': {
                return {
                    name: 'SqlFile',
                    mandatory: [
                        { name: 'statements', type: 'array' }
                    ]
                };
            }
            case 'StringDataType': {
                return {
                    name: 'StringDataType',
                    mandatory: [
                        { name: 'varying', type: 'boolean' }
                    ]
                };
            }
            case 'TableDefinition': {
                return {
                    name: 'TableDefinition',
                    mandatory: [
                        { name: 'columns', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new SqlAstReflection();
